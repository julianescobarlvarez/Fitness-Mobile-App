import React, { useState, useEffect } from 'react'
import { Pressable, StyleSheet, Text, View, Alert, Image } from 'react-native'
import { auth, dbFirebase } from '../../../.expo/credentials'
import { signOut } from 'firebase/auth'
import { collection, getDocs } from 'firebase/firestore'

export default function ProfileConfigScreen() {
    const [list, setList] = useState([])

    // Obtener valores de medallas de desafío desde Firestore
    useEffect(() => {
        const getMedalValues = async() => {
            try {
                const querysnapshot = await getDocs(collection(dbFirebase, 'users'))
                const docs = []

                querysnapshot.forEach((doc)=>{
                    const {beginnerMedal, intermediateMedal, advanceMedal} = doc.data()

                    docs.push({
                        id: doc.id,
                        beginnerMedal,
                        intermediateMedal,
                        advanceMedal
                    })
                })
                setList(docs)
            } catch (error) {
                console.log(error)
            }
        };
        getMedalValues();
    }, []);

    // Función para actualizar un campo de un documento
    const updateMedalValues = async () => {
        try {
            const docRef = doc(dbFirebase, 'users', auth); // Referencia al documento
            await updateDoc(docRef, {
                beginnerMedal: +1 // Cambia el campo y valor
            });
            console.log("Medalla actualizada correctamente!");
        } catch (error) {
            console.error("Error actualizando el documento: ", error);
        }
    };

    const handleSignOut = async () => {
        try {
            await signOut(auth);
        } catch (error) {
            console.error("Error al cerrar sesión: ", error);
            Alert.alert('Error', 'Hubo un error al cerrar sesión');
        }
      }
    //Imagen del perfil con IF(si está vacio [yes], else [no])
    return (
        <View style={styles.container}>
            <View
                style={{
                    alignItems: 'center',
                    marginTop: 20,
                    marginBottom: 20
                }}
            >
                <Image
                    source={require("../../assets/profile.png")} 
                    style={{ 
                        borderRadius: 10,
                        width: 130, 
                        height: 110,
                    }}
                />
                <Text 
                    style={{
                        textAlign: 'center',
                        fontWeight: 'bold',
                        fontSize: 20
                    }}>Angelo</Text>
            </View>
            <View style={styles.challengeContainer}>
                <Text style={{
                    textAlign: 'center',
                    fontSize: 20,
                    fontWeight: 'bold'
                }}>Desafíos completados</Text>
                <View 
                style={styles.challengeSubContainer}>
                    <Image
                        source={require("../../assets/medals/beginner-medal.png")} 
                        style={{ 
                            width: 50, 
                            height: 50,
                        }}
                    />
                    <Image
                        source={require("../../assets/medals/intermediate-medal.png")} 
                        style={{ 
                            width: 50, 
                            height: 50,
                        }}
                    />
                    <Image
                        source={require("../../assets/medals/advance-medal.png")} 
                        style={{ 
                            width: 50, 
                            height: 50,
                        }}
                    />
                </View>
                {list.map((values)=>(
                    <View key={values.id} style={styles.medalContainer}>
                        <Text style={{fontSize: 18}}>{values.beginnerMedal}</Text>
                        <Text style={{fontSize: 18}}>{values.intermediateMedal}</Text>
                        <Text style={{fontSize: 18}}>{values.advanceMedal}</Text>
                    </View>
                ))}
            </View>
            <View style={styles.container2}>
                <Pressable onPress={handleSignOut} style={styles.buttonContainer2}>
                    <Text style={{
                        textAlign: 'center'
                    }}>Cerrar sesión</Text>
                </Pressable>
            </View>
        </View>
    )
}

const styles = StyleSheet.create({
    container: {
        flex: 1, 
        backgroundColor: '#f5f5f5',
    },
    challengeContainer: {
        backgroundColor: 'white',
        marginHorizontal: 15,
        padding: 20,
        borderRadius: 10,
    },
    challengeSubContainer: {
        alignItems: 'center', 
        flexDirection: 'row', 
        paddingHorizontal: 15, 
        padding: 15, 
        marginTop: 15, 
        justifyContent: 'space-between', 
        paddingBottom: 0
    },
    container2: {
        flexDirection: 'row',
        justifyContent: 'center',
        marginHorizontal: 15
    },
    buttonContainer: {
        backgroundColor: 'white',
        marginHorizontal: 5,
        marginTop: 15,
        padding: 20,
        borderRadius: 10,
    },
    buttonContainer2: {
        backgroundColor: 'white',
        marginHorizontal: 5,
        marginTop: 15,
        padding: 20,
        borderRadius: 10,
    },
    medalContainer: {
        alignItems: 'center', 
        flexDirection: 'row', 
        paddingHorizontal: 35, 
        justifyContent: 'space-between'
    }
});













import React, { useState, useEffect } from 'react'
import { Pressable, StyleSheet, Text, View, ScrollView, Image, ImageBackground, BackHandler } from 'react-native'
import { Ionicons } from '@expo/vector-icons'
import { LinearGradient } from 'expo-linear-gradient'
import { useFocusEffect } from '@react-navigation/native';
import { collection, doc, getDocs, updateDoc } from 'firebase/firestore' 
import { auth, dbFirebase } from '../../../.expo/credentials'

export default function HomeScreen(props) {
    const [list, setList] = useState([])
    const [challenge1, setChallenge1] = useState(false)
    const [challenge2, setChallenge2] = useState(false)
    const [challenge3, setChallenge3] = useState(false)
    const [challenge4, setChallenge4] = useState(false)
    const [challenge5, setChallenge5] = useState(false)
    const [challenge6, setChallenge6] = useState(false)
    const [challenge7, setChallenge7] = useState(false)
    const [challenge8, setChallenge8] = useState(false)
    const [challenge9, setChallenge9] = useState(false)
    
    // Usar useFocusEffect para que el evento solo esté activo cuando esta pantalla esté enfocada
    useFocusEffect(
        React.useCallback(() => {
        const onBackPress = () => {
            // Cerrar la aplicación cuando se presiona el botón de retroceso
            BackHandler.exitApp();
            return true; // Prevenir la acción predeterminada
        };

        // Registrar el evento de retroceso
        BackHandler.addEventListener('hardwareBackPress', onBackPress);

        // Limpiar el evento cuando la pantalla pierda el foco
        return () => BackHandler.removeEventListener('hardwareBackPress', onBackPress);
        }, [])
    );

    // Obtener valores de medallas de desafío desde Firestore
        useEffect(() => {
            const getChallenges = async() => {
                try {
                    const querysnapshot = await getDocs(collection(dbFirebase, 'challenges'))
                    const docs = []
    
                    querysnapshot.forEach((doc)=>{
                        const { state } = doc.data()
    
                        docs.push({
                            id: doc.id,
                            state: state,
                        })
                    })
                    setList(docs)
                } catch (error) {
                    console.log(error)
                }
            };
            getChallenges();
        }, []);

    //Para encontrar el desafío y desactivarlo como feedback
    const handleChallenge = async(key) => {
        try {
            // Buscar el desafío correspondiente en el arreglo 'list' usando el 'key'
            const challenge = list.find(item => item.id === key);
      
            if (challenge) {
                // Obtener la referencia del documento de Firestore
                const challengeRef = doc(dbFirebase, 'challenges', key);
        
                // Actualizar el estado del desafío en Firestore (cambiar a false)
                await updateDoc(challengeRef, {
                    state: true, // Cambiar el estado a 'false' para desactivar el desafío
                });
            } else {
                console.log(`No se encontró el desafío con ID: ${key}`);
            }
        } catch (error) {
            console.log('Error al actualizar el desafío:', error);
        }
    }
    //Se mostrará un resumen gráfico del plan del usuario (si existe)
    //Se mostrará una recomendación para crear un plan (si no existe)
    return (
        <View style={styles.container}> 
            <ScrollView showsVerticalScrollIndicator={false}>
                <View>
                    <Text style={styles.title}>EXPLORA TU POTENCIAL</Text>
                    <Text style={styles.textTitle}>
                        Cada cuerpo es diferente. Nuestra inteligencia artificial 
                        crea un plan de entrenamiento basado en tu nivel, preferencias 
                        y objetivos.
                    </Text>
                </View>
                <Pressable
                    onPress={() => props.navigation.navigate('form')}
                >
                    <ImageBackground
                        source={require("../../assets/main-photo.png")} 
                        style={styles.container2}
                        resizeMode="cover"
                    >
                        <View style={styles.overlay}> 
                            <Text style={styles.text}>
                                Crea un entrenamiento personalizado con IA
                            </Text>
                        </View>
                    </ImageBackground>
                </Pressable>
                <Text style={styles.title2}>DESAFÍOS</Text>
                <Text style={styles.textTitle2}>Principiante</Text>
                <View
                    style={{marginHorizontal: 10}}
                >
                    <ScrollView horizontal={true} showsHorizontalScrollIndicator={false}>
                        <Pressable
                            disabled={challenge1}
                            onPress={() => handleChallenge(challenge1, setChallenge1)}
                        >
                            <LinearGradient
                                colors={['#A7C5EB', '#4A90E2']}
                                style={styles.container3}
                                start={{ x: 0.4, y: 0 }}
                                end={{ x: 1, y: 0 }}
                            >
                                <Text style={styles.titleContain}>Desafío de Caminata Diaria (7 días)</Text>
                                <Text style={styles.textContain}>
                                    Camina 30 minutos al día durante 7 días consecutivos
                                </Text>
                            </LinearGradient>
                        </Pressable>
                        <Pressable
                            disabled={challenge2}
                            onPress={() => handleChallenge(challenge2, setChallenge2)}
                        >
                            <LinearGradient
                                colors={['#A7C5EB', '#4A90E2']}
                                style={styles.container3}
                                start={{ x: 0.4, y: 0 }}
                                end={{ x: 1, y: 0 }}
                            >
                                <Text style={styles.titleContain}>Desafío de Flexiones de Rodillas (5 días)</Text>
                                <Text style={styles.textContain}>
                                    Realiza 3 series de 10 flexiones de rodillas al día durante 5 días seguidos
                                </Text>
                            </LinearGradient>
                        </Pressable>
                        <Pressable
                            disabled={challenge3}
                            onPress={() => handleChallenge(challenge3, setChallenge3)}
                        >
                            <LinearGradient
                                colors={['#A7C5EB', '#4A90E2']}
                                style={styles.container5}
                                start={{ x: 0.4, y: 0 }}
                                end={{ x: 1, y: 0 }}
                            >
                                <Text style={styles.titleContain}>Desafío de Abdominales Básicos (7 días)</Text>
                                <Text style={styles.textContain}>
                                    Haz 3 series de 12 abdominales básicos al día durante 7 días consecutivos
                                </Text>
                            </LinearGradient>
                        </Pressable>
                    </ScrollView>
                </View>
                <Text style={styles.textTitle2}>Intermedio</Text>
                <View
                    style={{marginHorizontal: 10}}
                >
                    <ScrollView horizontal={true} showsHorizontalScrollIndicator={false}>
                        <Pressable
                            disabled={challenge4}
                            onPress={() => handleChallenge(challenge4, setChallenge4)}
                        >
                            <LinearGradient
                                colors={['#B8B8B8', '#8A8A8A']}
                                style={styles.container3}
                                start={{ x: 0.4, y: 0 }}
                                end={{ x: 1, y: 0 }}
                            >
                                <Text style={styles.titleContain}>Desafío de Sentadillas (10 días)</Text>
                                <Text style={styles.textContain}>
                                    Realiza 3 series de 15 sentadillas al día durante 10 días
                                </Text>
                            </LinearGradient>
                        </Pressable>
                        <Pressable
                            disabled={challenge5}
                            onPress={() => handleChallenge(challenge5, setChallenge5)}
                        >
                            <LinearGradient
                                colors={['#B8B8B8', '#8A8A8A']}
                                style={styles.container3}
                                start={{ x: 0.4, y: 0 }}
                                end={{ x: 1, y: 0 }}
                            >
                                <Text style={styles.titleContain}>Desafío de Plancha (5 días)</Text>
                                <Text style={styles.textContain}>
                                    Mantén una plancha por 30 segundos, 3 veces al día durante 5 días consecutivos
                                </Text>
                            </LinearGradient>
                        </Pressable>
                        <Pressable
                            disabled={challenge6}
                            onPress={() => handleChallenge(challenge6, setChallenge6)}
                        >
                            <LinearGradient
                                colors={['#B8B8B8', '#8A8A8A']}
                                style={styles.container5}
                                start={{ x: 0.4, y: 0 }}
                                end={{ x: 1, y: 0 }}
                            >
                                <Text style={styles.titleContain}>Desafío de Cardio Rápido (7 días)</Text>
                                <Text style={styles.textContain}>
                                    Realiza 20 minutos de actividad cardiovascular moderada (como trotar, saltar la 
                                    cuerda, bicicleta estática) durante 7 días
                                </Text>
                            </LinearGradient>
                        </Pressable>
                    </ScrollView>
                </View>
                <Text style={styles.textTitle2}>Avanzado</Text>
                <View
                    style={{
                        marginHorizontal: 10,
                    }}
                >
                    <ScrollView horizontal={true} showsHorizontalScrollIndicator={false}>
                        <Pressable
                            disabled={challenge7}
                            onPress={() => handleChallenge(challenge7, setChallenge7)}
                        >
                            <LinearGradient
                                colors={['#FFD700', '#D4AF37']}
                                style={styles.container3}
                                start={{ x: 0.4, y: 0 }}
                                end={{ x: 1, y: 0 }}
                            >
                                <Text style={styles.titleContain}>Desafío de HIIT (5 días)</Text>
                                <Text style={styles.textContain}>
                                    Realiza una rutina de entrenamiento de intervalos de alta intensidad (HIIT) de 
                                    20 minutos, 5 días consecutivos
                                </Text>
                            </LinearGradient>
                        </Pressable>
                        <Pressable
                            disabled={challenge8}
                            onPress={() => handleChallenge(challenge8, setChallenge8)}
                        >
                            <LinearGradient
                                colors={['#FFD700', '#D4AF37']}
                                style={styles.container3}
                                start={{ x: 0.4, y: 0 }}
                                end={{ x: 1, y: 0 }}
                            >
                                <Text style={styles.titleContain}>Desafío de Sentadillas con Salto (10 días)</Text>
                                <Text style={styles.textContain}>
                                    Realiza 4 series de 15 sentadillas con salto cada día durante 10 días consecutivos
                                </Text>
                            </LinearGradient>
                        </Pressable>
                        <Pressable
                            disabled={challenge9}
                            onPress={() => handleChallenge(challenge9, setChallenge9)}
                        >
                            <LinearGradient
                                colors={['#FFD700', '#D4AF37']}
                                style={styles.container5}
                                start={{ x: 0.4, y: 0 }}
                                end={{ x: 1, y: 0 }}
                            >
                                <Text style={styles.titleContain}>Desafío de Flexiones Avanzadas (7 días)</Text>
                                <Text style={styles.textContain}>
                                    Realiza 4 series de 15 flexiones avanzadas (pueden ser flexiones con palmada o 
                                    flexiones declinadas) al día durante 7 días
                                </Text>
                            </LinearGradient>
                        </Pressable>
                    </ScrollView>
                </View>
                <View style={styles.container4}></View>
            </ScrollView>
            <View 
                style={styles.button} 
                onStartShouldSetResponder={() => true} 
                onResponderStart={() => props.navigation.navigate('form')}
            >
                <Ionicons 
                    name="add-circle-outline" 
                    size={35} 
                    color={'white'} 
                />
            </View>
        </View>
    )
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#f5f5f5',
        marginHorizontal: 15,
    },
    container2: {
        backgroundColor: '#707070',
        marginTop: 15,
        height: 230,
        borderRadius: 10,
        overflow: 'hidden'
    },
    container3: {
        backgroundColor: 'white',
        padding: 20,
        borderRadius: 10,
        marginRight: 15,
        justifyContent: 'center',
        alignItems: 'center', 
        width: '340'
    },
    container4: {
        marginBottom: 90
    },
    container5: {
        backgroundColor: 'white',
        padding: 20,
        borderRadius: 10,
        marginRight: 5,
        justifyContent: 'center',
        alignItems: 'center', 
        width: '350'
    },
    button: {
        position: 'absolute', 
        bottom: 15,
        right: 0,
        backgroundColor: '#4745ff', 
        width: 60,
        height: 60,
        padding: 10,
        borderRadius: 15, 
        justifyContent: 'center',
        alignItems: 'center',

    },
    buttonText: {
        color: 'white', 
        fontWeight: 'bold',
    },
    title: {
        fontSize: 20,
        fontWeight: 'bold',
        marginTop: 15,
    },
    title2: {
        fontSize: 20,
        fontWeight: 'bold',
        marginTop: 30,
        marginBottom: 15,
    },
    overlay: {
        backgroundColor: 'rgba(0, 0, 0, 0.7)', // Filtro oscuro sobre la imagen para que el texto sea legible
        marginTop: 160
    },
    textTitle: {
        fontSize: 17,
        marginTop: 15
    },
    textTitle2: {
        fontSize: 18,
        fontWeight: 'bold',
        marginTop: 20,
        marginBottom: 15
    },
    text: {
        color: 'white',
        fontSize: 18,
        padding: 15,
        fontWeight: 'bold',
    },
    titleContain: {
        fontWeight: 'bold', 
        fontSize: 18
    },
    textContain: {
        fontSize: 16
    }
});